<Workspace Version="0.8.2.2392" X="261.984440390741" Y="344.591959465705" zoom="1.84611820260947" Name="Form.ByGeometry" Description="Attempts to convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. Solids can be converted into voids. Provide either one true boolean to convert everything into voids or a unique boolean for each geometry object." ID="268c3e45-41fa-4d94-a91c-1a45a41b45aa" Category="SpringNodes.Revit.Forms">
  <NamespaceResolutionMap />
  <Elements>
    <DSIronPythonNode.PythonNode guid="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" type="DSIronPythonNode.PythonNode" nickname="Python Script" x="249.717208630228" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" inputcount="2">
      <Script>import clr

clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
doc = DocumentManager.Instance.CurrentDBDocument

clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference("RevitAPI")
import Autodesk

clr.AddReference("System")
from System.Collections.Generic import *

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

def output1(l1):
	if len(l1) == 1: return l1[0]
	else: return l1

def NewForm(_solid_):
	el1 = UnwrapElement(Revit.Elements.ImportInstance.ByGeometry(_solid_))
	opt1 = Autodesk.Revit.DB.Options()
	opt1.ComputeReferences = True
	geom1 = el1.get_Geometry(opt1)
	enum = geom1.GetEnumerator()
	enum.MoveNext()
	geom2 = enum.Current.GetInstanceGeometry()
	enum2 = geom2.GetEnumerator()
	enum2.MoveNext()
	s1 = enum2.Current
	doc.Delete(el1.Id)
	try:
		s2 = Autodesk.Revit.DB.FreeFormElement.Create(doc,s1)
		return s2.ToDSType(False)
	except:
		return None

geom = tolist(IN[0])
isVoid = tolist(IN[1])
out1 = []

if doc.IsFamilyDocument:
	TransactionManager.Instance.EnsureInTransaction(doc)
	for g in geom:
		try: out1.append(NewForm(g))
		except: out1.append(None)
	TransactionManager.Instance.TransactionTaskDone()
	if len(isVoid) == 1 and len(out1) &gt;= 1:
		[f.SetParameterByName("Solid/Void", isVoid[0]) for f in out1 if f != None]
	elif len(isVoid) &gt; 1 and len(out1) &gt; 1:
		[f.SetParameterByName("Solid/Void", val) for f, val in zip(out1,isVoid) if f != None]
	OUT = output1(out1)
else:
	OUT = "Forms can only exist in family documents"</Script>
    </DSIronPythonNode.PythonNode>
    <Dynamo.Nodes.Symbol guid="eae70b5f-0692-4372-ab80-d18a7b1f5adb" type="Dynamo.Nodes.Symbol" nickname="Input" x="127.34323536274" y="0.57361817730964" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="geometry" />
    </Dynamo.Nodes.Symbol>
    <Dynamo.Nodes.Output guid="6b741902-d5d8-4efe-b621-e8d7fb813375" type="Dynamo.Nodes.Output" nickname="Output" x="419.171854779899" y="-0.57361817730964" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False">
      <Symbol value="Form" />
    </Dynamo.Nodes.Output>
    <Dynamo.Nodes.Symbol guid="f6688745-2d9a-436b-8ce6-8f61c0f2b25f" type="Dynamo.Nodes.Symbol" nickname="Input" x="1.74932482264768" y="62.7646438888043" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True">
      <Symbol value="isVoid:var[]..[] = false" />
    </Dynamo.Nodes.Symbol>
  </Elements>
  <Connectors>
    <Dynamo.Models.ConnectorModel start="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" start_index="0" end="6b741902-d5d8-4efe-b621-e8d7fb813375" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="eae70b5f-0692-4372-ab80-d18a7b1f5adb" start_index="0" end="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" end_index="0" portType="0" />
    <Dynamo.Models.ConnectorModel start="f6688745-2d9a-436b-8ce6-8f61c0f2b25f" start_index="0" end="5b20d6d5-cea0-41c5-bfc5-69ce2f727abf" end_index="1" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="background_preview" eyeX="10" eyeY="15" eyeZ="10" lookX="-10" lookY="-10" lookZ="-10" />
  </Cameras>
</Workspace>